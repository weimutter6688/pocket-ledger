# 第一阶段：基础依赖阶段
FROM node:20-alpine AS base
WORKDIR /app

# 第二阶段：只安装生产依赖
FROM base AS deps
# 复制package.json文件
COPY package.json package-lock.json ./
# 仅安装生产依赖
RUN npm config set ignore-scripts true && \
    npm ci --omit=dev && \
    npm cache clean --force

# 第三阶段：创建最小运行镜像
FROM base AS runner
WORKDIR /app

# 环境变量设置
ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1

# 非root用户运行
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs && \
    mkdir -p /app && \
    chown -R nextjs:nodejs /app

# 从deps阶段复制已安装的生产依赖
COPY --from=deps --chown=nextjs:nodejs /app/node_modules ./node_modules
# 复制package.json文件
COPY --chown=nextjs:nodejs package.json package-lock.json ./

# 复制已构建的应用文件
COPY --chown=nextjs:nodejs .next ./.next
COPY --chown=nextjs:nodejs public ./public
COPY --chown=nextjs:nodejs next.config.ts ./
COPY --chown=nextjs:nodejs next-env.d.ts ./

# 复制Prisma相关文件并确保权限正确
COPY --chown=nextjs:nodejs prisma/schema.prisma ./prisma/
COPY --chown=nextjs:nodejs prisma/migrations ./prisma/migrations

# 确保prisma目录存在并有正确权限
RUN mkdir -p /app/prisma && \
    chown -R nextjs:nodejs /app/prisma && \
    chmod -R 755 /app/prisma

# 复制环境变量文件
COPY --chown=nextjs:nodejs .env ./

# 生成Prisma客户端
RUN npx prisma generate

# 安装bcrypt (用于数据初始化)
RUN npm install bcrypt

# 复制初始化脚本
COPY --chown=nextjs:nodejs init-db.js ./

# 使用非root用户运行
USER nextjs

# 数据库初始化脚本（创建为入口点）
COPY --chown=nextjs:nodejs docker-entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

# 暴露端口
EXPOSE 3000

# 入口点
ENTRYPOINT ["/docker-entrypoint.sh"]